     CURRENT
     -Finishing the feature switch player with cpu
     
     -BUG - Turns not appear correctly 

     -BUG FIXED- Game conflicts will player wins and tie game

     -BUG FIXED If click 'the cell is full!' there will be bug with cellTotal function

     -BUG FIXED - Issue with lastCell count randomly turn into 1 when its not even last cell

     -BUG FIXED- Tie game is error/not registering/call stack size exceed PROBLEM
     last cell, if place, computer will try to place the circle too cause 'Call stack exceed'
     (Fixed by using cellCount each round, cellCount used like a countdown)

     -BUG FIXED- some cpu move doesnt appear
     
     -BUG FIXED - fixed randomCol and randomRow doesnt appear correctly
     -BUG FIXED: grid non-interactive after place 'style.display' (fixed with using style.visibility)
     -BUG FIXED: turn statement doesnt appear correctly
     -BUG FIXED: diagonal wins repeat 3 times (Use 'break' because the win looping 'checkResult' 3 times)
     -BUG FIXED: double cross with vs CPU current Issue DONE(fixed playerOne = -playerOne not cpuBot
      -make a startup screen if you are X or O JAVA DONEs
      -bug double click X turns into O FIXED
        - score is still -1 after double click, only the icon changed
        - issue (changing playerTwo = playerOne *= -1)
        - if double click, the board will multiply  (1 * -1) becomes -1
      -BUG FIXED tie inner HTML
      -after win, reset game DONE
      -startup screen HALFWAY DONE
      -Fixed player score positioning DONE
      -tie game issue DONE
      -create 2 buttons DONE
      -reset game (remove cross and circle) DONE
      
            function placeMarkers(index) {
        let col = index % 3;
        let row = (index - col) / 3;

        if (vsTogglePlayer === true && boardData[row][col] === 0) {
          boardData[row][col] = playerOne;
          playerOne = -playerOne; //Switch between Plyr1 n Plyr 2
          //Using unary negation operator (playerOne becomes negative)
          //equivalent to multiplying 'playerOne' by -1
          console.log('vs player');
          drawMarker();
          checkResult();
           else {
            console.log("cell is full! 2");
           }
          }
          if (swingTurnsX === true){
            turnsText.innerHTML = (`Player 2 <br> Next turn O`);
            swingTurnsX = false;
            
          } else {
            turnsText.innerHTML = (`Player 1 <br> Next turn X`);
            swingTurnsX;

          if(swingTurnsO === true){
            turnsText.innerHTML = (`Player 2 <br> Next turn O`);
            swingTurnsO = false; 
          } else {
            turnsText.innerHTML = (`Player 1 <br> Next turn X`);
            swingTurnsO; 
          }
          
          
          if (resetGrid()){ //NEEDS TO CHECK BACK, CURRENTLY TESTING!!
            if(permanentTurns){
              turns;
            } else if(!permanentTurns){
              !turns;
            }
          }
           }
          } 
